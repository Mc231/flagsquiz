// Mocks generated by Mockito 5.4.4 from annotations
// in flagsquiz/test/countries_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flags_quiz/foundation/asset_provider.dart' as _i3;
import 'package:flutter/services.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetBundle_0 extends _i1.SmartFake implements _i2.AssetBundle {
  _FakeAssetBundle_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AssetProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetProvider extends _i1.Mock implements _i3.AssetProvider {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i2.AssetBundle get bundle => (super.noSuchMethod(
        Invocation.getter(#bundle),
        returnValue: _FakeAssetBundle_0(
          this,
          Invocation.getter(#bundle),
        ),
        returnValueForMissingStub: _FakeAssetBundle_0(
          this,
          Invocation.getter(#bundle),
        ),
      ) as _i2.AssetBundle);

  @override
  _i5.Future<String> provide() => (super.noSuchMethod(
        Invocation.method(
          #provide,
          [],
        ),
        returnValue: _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #provide,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #provide,
            [],
          ),
        )),
      ) as _i5.Future<String>);
}
