// Mocks generated by Mockito 5.4.4 from annotations
// in flagsquiz/test/ui/game_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flagsquiz/bussiness_logic/countries_provider.dart' as _i3;
import 'package:flagsquiz/foundation/asset_provider.dart' as _i2;
import 'package:flagsquiz/foundation/random_item_picker.dart' as _i6;
import 'package:flagsquiz/models/country.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetProvider_0 extends _i1.SmartFake implements _i2.AssetProvider {
  _FakeAssetProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CountriesProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCountriesProvider extends _i1.Mock implements _i3.CountriesProvider {
  @override
  _i2.AssetProvider get provider => (super.noSuchMethod(
        Invocation.getter(#provider),
        returnValue: _FakeAssetProvider_0(
          this,
          Invocation.getter(#provider),
        ),
        returnValueForMissingStub: _FakeAssetProvider_0(
          this,
          Invocation.getter(#provider),
        ),
      ) as _i2.AssetProvider);

  @override
  _i4.Future<List<_i5.Country>> provide() => (super.noSuchMethod(
        Invocation.method(
          #provide,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Country>>.value(<_i5.Country>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Country>>.value(<_i5.Country>[]),
      ) as _i4.Future<List<_i5.Country>>);
}

/// A class which mocks [RandomItemPicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomItemPicker extends _i1.Mock
    implements _i6.RandomItemPicker<_i5.Country> {
  @override
  List<_i5.Country> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: <_i5.Country>[],
        returnValueForMissingStub: <_i5.Country>[],
      ) as List<_i5.Country>);

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void replaceItems(List<_i5.Country>? items) => super.noSuchMethod(
        Invocation.method(
          #replaceItems,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}
